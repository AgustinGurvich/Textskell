-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Comms                              (0)
	Comms -> Comm                                      (1)
	Comms -> Comm Comms                                (2)
	Comm -> Var '<-' Atom                              (3)
	Comm -> setPlayer Player                           (4)
	Comm -> setCell '(' Int ',' Int ')' Cell           (5)
	Comm -> setMap Var                                 (6)
	Cell -> Empty                                      (7)
	Cell -> Treasure '(' Atom ',' Atom ')'             (8)
	Cell -> Enemy '(' Atom ',' Atom ')'                (9)
	Cell -> Exit                                       (10)
	Atom -> '(' Int ',' Int ')'                        (11)
	Atom -> '(' Atom ',' Buff ',' Int ')'              (12)
	Atom -> Var                                        (13)
	Player -> '(' Int ',' Int ',' '(' Int ',' Int ')' ')'   (14)
	Buff -> Dmg                                        (15)
	Buff -> HP                                         (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'<-'           { TAss }
	'('            { TOpen }
	')'            { TClose }
	','            { TComma }
	setPlayer      { TPlayer }
	setCell        { TCell }
	setMap         { TMap }
	Dmg            { TDmg }
	HP             { THp }
	Int            { TInt $$ }
	Var            { TVar $$ }
	Empty          { TEmpty }
	Treasure       { TTreasure }
	Enemy          { TEnemy }
	Exit           { TExit }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Comms           rules 1, 2
	Comm            rules 3, 4, 5, 6
	Cell            rules 7, 8, 9, 10
	Atom            rules 11, 12, 13
	Player          rule  14
	Buff            rules 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	setPlayer      shift, and enter state 3
	setCell        shift, and enter state 4
	setMap         shift, and enter state 5
	Var            shift, and enter state 6

	Comms          goto state 7
	Comm           goto state 8

State 1


	setPlayer      shift, and enter state 3
	setCell        shift, and enter state 4
	setMap         shift, and enter state 5
	Var            shift, and enter state 6

	Comm           goto state 2

State 2

	Comms -> Comm .                                     (rule 1)



State 3

	Comm -> setPlayer . Player                          (rule 4)

	'('            shift, and enter state 14

	Player         goto state 13

State 4

	Comm -> setCell . '(' Int ',' Int ')' Cell          (rule 5)

	'('            shift, and enter state 12


State 5

	Comm -> setMap . Var                                (rule 6)

	Var            shift, and enter state 11


State 6

	Comm -> Var . '<-' Atom                             (rule 3)

	'<-'           shift, and enter state 10


State 7

	%start_parse -> Comms .                             (rule 0)

	%eof           accept


State 8

	Comms -> Comm .                                     (rule 1)
	Comms -> Comm . Comms                               (rule 2)

	setPlayer      shift, and enter state 3
	setCell        shift, and enter state 4
	setMap         shift, and enter state 5
	Var            shift, and enter state 6
	%eof           reduce using rule 1

	Comms          goto state 9
	Comm           goto state 8

State 9

	Comms -> Comm Comms .                               (rule 2)

	%eof           reduce using rule 2


State 10

	Comm -> Var '<-' . Atom                             (rule 3)

	'('            shift, and enter state 18
	Var            shift, and enter state 19

	Atom           goto state 17

State 11

	Comm -> setMap Var .                                (rule 6)

	setPlayer      reduce using rule 6
	setCell        reduce using rule 6
	setMap         reduce using rule 6
	Var            reduce using rule 6
	%eof           reduce using rule 6


State 12

	Comm -> setCell '(' . Int ',' Int ')' Cell          (rule 5)

	Int            shift, and enter state 16


State 13

	Comm -> setPlayer Player .                          (rule 4)

	setPlayer      reduce using rule 4
	setCell        reduce using rule 4
	setMap         reduce using rule 4
	Var            reduce using rule 4
	%eof           reduce using rule 4


State 14

	Player -> '(' . Int ',' Int ',' '(' Int ',' Int ')' ')'    (rule 14)

	Int            shift, and enter state 15


State 15

	Player -> '(' Int . ',' Int ',' '(' Int ',' Int ')' ')'    (rule 14)

	','            shift, and enter state 23


State 16

	Comm -> setCell '(' Int . ',' Int ')' Cell          (rule 5)

	','            shift, and enter state 22


State 17

	Comm -> Var '<-' Atom .                             (rule 3)

	setPlayer      reduce using rule 3
	setCell        reduce using rule 3
	setMap         reduce using rule 3
	Var            reduce using rule 3
	%eof           reduce using rule 3


State 18

	Atom -> '(' . Int ',' Int ')'                       (rule 11)
	Atom -> '(' . Atom ',' Buff ',' Int ')'             (rule 12)

	'('            shift, and enter state 18
	Int            shift, and enter state 21
	Var            shift, and enter state 19

	Atom           goto state 20

State 19

	Atom -> Var .                                       (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13
	setPlayer      reduce using rule 13
	setCell        reduce using rule 13
	setMap         reduce using rule 13
	Var            reduce using rule 13
	%eof           reduce using rule 13


State 20

	Atom -> '(' Atom . ',' Buff ',' Int ')'             (rule 12)

	','            shift, and enter state 27


State 21

	Atom -> '(' Int . ',' Int ')'                       (rule 11)

	','            shift, and enter state 26


State 22

	Comm -> setCell '(' Int ',' . Int ')' Cell          (rule 5)

	Int            shift, and enter state 25


State 23

	Player -> '(' Int ',' . Int ',' '(' Int ',' Int ')' ')'    (rule 14)

	Int            shift, and enter state 24


State 24

	Player -> '(' Int ',' Int . ',' '(' Int ',' Int ')' ')'    (rule 14)

	','            shift, and enter state 33


State 25

	Comm -> setCell '(' Int ',' Int . ')' Cell          (rule 5)

	')'            shift, and enter state 32


State 26

	Atom -> '(' Int ',' . Int ')'                       (rule 11)

	Int            shift, and enter state 31


State 27

	Atom -> '(' Atom ',' . Buff ',' Int ')'             (rule 12)

	Dmg            shift, and enter state 29
	HP             shift, and enter state 30

	Buff           goto state 28

State 28

	Atom -> '(' Atom ',' Buff . ',' Int ')'             (rule 12)

	','            shift, and enter state 41


State 29

	Buff -> Dmg .                                       (rule 15)

	','            reduce using rule 15


State 30

	Buff -> HP .                                        (rule 16)

	','            reduce using rule 16


State 31

	Atom -> '(' Int ',' Int . ')'                       (rule 11)

	')'            shift, and enter state 40


State 32

	Comm -> setCell '(' Int ',' Int ')' . Cell          (rule 5)

	Empty          shift, and enter state 36
	Treasure       shift, and enter state 37
	Enemy          shift, and enter state 38
	Exit           shift, and enter state 39

	Cell           goto state 35

State 33

	Player -> '(' Int ',' Int ',' . '(' Int ',' Int ')' ')'    (rule 14)

	'('            shift, and enter state 34


State 34

	Player -> '(' Int ',' Int ',' '(' . Int ',' Int ')' ')'    (rule 14)

	Int            shift, and enter state 45


State 35

	Comm -> setCell '(' Int ',' Int ')' Cell .          (rule 5)

	setPlayer      reduce using rule 5
	setCell        reduce using rule 5
	setMap         reduce using rule 5
	Var            reduce using rule 5
	%eof           reduce using rule 5


State 36

	Cell -> Empty .                                     (rule 7)

	setPlayer      reduce using rule 7
	setCell        reduce using rule 7
	setMap         reduce using rule 7
	Var            reduce using rule 7
	%eof           reduce using rule 7


State 37

	Cell -> Treasure . '(' Atom ',' Atom ')'            (rule 8)

	'('            shift, and enter state 44


State 38

	Cell -> Enemy . '(' Atom ',' Atom ')'               (rule 9)

	'('            shift, and enter state 43


State 39

	Cell -> Exit .                                      (rule 10)

	setPlayer      reduce using rule 10
	setCell        reduce using rule 10
	setMap         reduce using rule 10
	Var            reduce using rule 10
	%eof           reduce using rule 10


State 40

	Atom -> '(' Int ',' Int ')' .                       (rule 11)

	')'            reduce using rule 11
	','            reduce using rule 11
	setPlayer      reduce using rule 11
	setCell        reduce using rule 11
	setMap         reduce using rule 11
	Var            reduce using rule 11
	%eof           reduce using rule 11


State 41

	Atom -> '(' Atom ',' Buff ',' . Int ')'             (rule 12)

	Int            shift, and enter state 42


State 42

	Atom -> '(' Atom ',' Buff ',' Int . ')'             (rule 12)

	')'            shift, and enter state 49


State 43

	Cell -> Enemy '(' . Atom ',' Atom ')'               (rule 9)

	'('            shift, and enter state 18
	Var            shift, and enter state 19

	Atom           goto state 48

State 44

	Cell -> Treasure '(' . Atom ',' Atom ')'            (rule 8)

	'('            shift, and enter state 18
	Var            shift, and enter state 19

	Atom           goto state 47

State 45

	Player -> '(' Int ',' Int ',' '(' Int . ',' Int ')' ')'    (rule 14)

	','            shift, and enter state 46


State 46

	Player -> '(' Int ',' Int ',' '(' Int ',' . Int ')' ')'    (rule 14)

	Int            shift, and enter state 52


State 47

	Cell -> Treasure '(' Atom . ',' Atom ')'            (rule 8)

	','            shift, and enter state 51


State 48

	Cell -> Enemy '(' Atom . ',' Atom ')'               (rule 9)

	','            shift, and enter state 50


State 49

	Atom -> '(' Atom ',' Buff ',' Int ')' .             (rule 12)

	')'            reduce using rule 12
	','            reduce using rule 12
	setPlayer      reduce using rule 12
	setCell        reduce using rule 12
	setMap         reduce using rule 12
	Var            reduce using rule 12
	%eof           reduce using rule 12


State 50

	Cell -> Enemy '(' Atom ',' . Atom ')'               (rule 9)

	'('            shift, and enter state 18
	Var            shift, and enter state 19

	Atom           goto state 55

State 51

	Cell -> Treasure '(' Atom ',' . Atom ')'            (rule 8)

	'('            shift, and enter state 18
	Var            shift, and enter state 19

	Atom           goto state 54

State 52

	Player -> '(' Int ',' Int ',' '(' Int ',' Int . ')' ')'    (rule 14)

	')'            shift, and enter state 53


State 53

	Player -> '(' Int ',' Int ',' '(' Int ',' Int ')' . ')'    (rule 14)

	')'            shift, and enter state 58


State 54

	Cell -> Treasure '(' Atom ',' Atom . ')'            (rule 8)

	')'            shift, and enter state 57


State 55

	Cell -> Enemy '(' Atom ',' Atom . ')'               (rule 9)

	')'            shift, and enter state 56


State 56

	Cell -> Enemy '(' Atom ',' Atom ')' .               (rule 9)

	setPlayer      reduce using rule 9
	setCell        reduce using rule 9
	setMap         reduce using rule 9
	Var            reduce using rule 9
	%eof           reduce using rule 9


State 57

	Cell -> Treasure '(' Atom ',' Atom ')' .            (rule 8)

	setPlayer      reduce using rule 8
	setCell        reduce using rule 8
	setMap         reduce using rule 8
	Var            reduce using rule 8
	%eof           reduce using rule 8


State 58

	Player -> '(' Int ',' Int ',' '(' Int ',' Int ')' ')' .    (rule 14)

	setPlayer      reduce using rule 14
	setCell        reduce using rule 14
	setMap         reduce using rule 14
	Var            reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 15
Number of non-terminals: 7
Number of states: 59
